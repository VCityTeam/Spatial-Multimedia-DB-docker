version: '3.0'

# volumes:
#   postgres_data:
#     driver: local
#   kc_postgres_data:
#     driver: local

services:
  postgres-smdb:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_SMDB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_SMDB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_SMDB_DB_NAME}
    volumes:
      - ./Smdb_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          # Refer to
        # https://stackoverflow.com/questions/70205657/postgres-docker-role-root-does-not-exist/71986488#71986488
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      # Expose server on debug purposes
      - 5432:5432

  spatial-multimedia-db:
    build:
      context: ../Spatial-Multimedia-DB-context
    environment:
      POSTGRES_ORDBMS: ${POSTGRES_SMDB_ORDBMS}
      POSTGRES_USER: ${POSTGRES_SMDB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SMDB_PASSWORD}
      POSTGRES_HOST: postgres-smdb
      POSTGRES_PORT: 5432
      POSTGRES_DB_NAME: ${POSTGRES_SMDB_DB_NAME}
      SPATIAL_MULTIMEDIA_DB_PORT: ${SPATIAL_MULTIMEDIA_DB_PORT}
      SPATIAL_MULTIMEDIA_DB_ADMIN_EMAIL: ${SPATIAL_MULTIMEDIA_DB_ADMIN_EMAIL}
      SPATIAL_MULTIMEDIA_DB_ADMIN_FIRST_NAME: ${SPATIAL_MULTIMEDIA_DB_ADMIN_FIRST_NAME}
      SPATIAL_MULTIMEDIA_DB_ADMIN_LAST_NAME: ${SPATIAL_MULTIMEDIA_DB_ADMIN_LAST_NAME}
      SPATIAL_MULTIMEDIA_DB_ADMIN_PASSWORD: ${SPATIAL_MULTIMEDIA_DB_ADMIN_PASSWORD}
      SPATIAL_MULTIMEDIA_DB_ADMIN_USERNAME: ${SPATIAL_MULTIMEDIA_DB_ADMIN_USERNAME}
    ports:
      - ${SPATIAL_MULTIMEDIA_DB_PORT}:5000
    volumes:
      - .:/api
    depends_on:
      postgres-smdb:
        condition: service_healthy

  postgres-keycloak:
    image: postgres:15
    volumes:
      - ./Keycloak_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    environment:
      KC_DB: postgres
      KC_DB_SCHEMA: public
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/${POSTGRES_KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_USER: initial_user
      KEYCLOAK_PASSWORD: initial_user_dummy_password
      # Avoid keycloak warning message of the form
      #    Datasource <default> enables XA but transaction recovery is not 
      #    enabled. Please enable transaction recovery by setting 
      #    quarkus.transaction-manager.enable-recovery=true [...]
      # Refer to
      # https://github.com/keycloak/keycloak/issues/15255#issuecomment-1446166497
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: "true"
    volumes:
      # Refererence
      # https://www.keycloak.org/server/containers#_importing_a_realm_on_startup
      - ./Keycloak_data/import:/opt/keycloak/data/import/
      # Uncomment folowing line when "dumping" the realm
      # - ./Keycloak_data/export:/tmp/export
      # and then use (refer below for references) e.g.
      # docker exec -t example_keycloak_1 /opt/keycloak/bin/kc.sh    \
      #   export --dir /tmp/export --realm master --users realm_file \
      #   --file /tmp/export/original-master-realm.json
    command:
      - start-dev
      - --import-realm
      # - --verbose
    ports:
      # Expose server on admin (and possibly debug) purposes
      - ${KEYCLOAK_PORT}:8080
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    ### Dockerized Keycloak related notes
    # On the correspondance between quay.io images and corresponding sources
    #  https://keycloak.discourse.group/t/source-behind-the-quay-io-latest-docker-image/15351
    # The answer goes:
    #   https://github.com/keycloak/keycloak/tree/main/quarkus/container
    #
    # For version 21.1.1 the Dockerfile is 
    #   https://github.com/keycloak/keycloak/blob/21.1.1/quarkus/container/Dockerfile
    # that uses this entrypoint.sh
    #   https://github.com/keycloak/keycloak/blob/21.1.1/quarkus/dist/src/main/content/bin/kc.sh
    # which provides some indirect clues about finding the environment variables
    # that are recognised by the main application (that is it points to the java
    # source code that should be analysed to find which environement variables
    # are imported).
    #
    # The valuable online keycloak container related information (look at the 
    # relevant options section at the bottom: you will need to open the sub-lists)
    # encountered at
    #    https://www.keycloak.org/server/containers#_importing_a_realm_on_startup
    # seems to be (partially at least) defined here
    #    https://github.com/keycloak/keycloak/blob/21.1.1/docs/guides/server/containers.adoc
    #
    # In order to obtain a (single and complete with users...) realm.json to be
    # imported at startup time of the keycloak container, a natural method
    # consists of letting the keycloak containter to boot for the first time
    # and then to require a dump of the realm (together with all its components
    # that is including the users). Some nice blogs e.g. 
    #   https://fnbk.medium.com/how-to-create-a-full-keycloak-export-ccd603e85ad1
    #   https://keepgrowing.in/tools/keycloak-in-docker-5-how-to-export-a-realm-with-users-and-secrets/
    # document this process although keycloak docker version 21.1.1 doesnt't
    # offer the 'stanalone.sh' script anymore.
    # Instead use the following command
    # docker exec -t example_keycloak_1 /opt/keycloak/bin/kc.sh export --dir /tmp/export --realm master --users realm_file --file /tmp/export/original-master-realm.json

